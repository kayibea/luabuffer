local buffer = require("buffer")

describe("Buffer read/write methods", function()
  it("writes and reads UInt32LE at offset 0", function()
    local buf = buffer.alloc(4)
    buf:writeUInt32LE(0x78563412, 0)
    assert.are.equal(buf:readUInt32LE(0), 0x78563412)
  end)

  it("writes and reads UInt32LE with omitted offset (defaults to 0)", function()
    local buf = buffer.alloc(4)
    buf:writeUInt32LE(0x78563412)
    assert.are.equal(buf:readUInt32LE(), 0x78563412)
  end)

  it("writes and reads UInt32BE at offset 0", function()
    local buf = buffer.alloc(4)
    buf:writeUInt32BE(0x12345678, 0)
    assert.are.equal(buf:readUInt32BE(0), 0x12345678)
  end)

  it("writes and reads UInt32BE with omitted offset (defaults to 0)", function()
    local buf = buffer.alloc(4)
    buf:writeUInt32BE(0x12345678)
    assert.are.equal(buf:readUInt32BE(), 0x12345678)
  end)

  it("writes and reads FloatLE at offset 0", function()
    local buf = buffer.alloc(4)
    buf:writeFloatLE(3.14, 0)
    assert.is_true(math.abs(buf:readFloatLE(0) - 3.14) < 1e-6)
  end)

  it("writes and reads FloatLE with omitted offset (defaults to 0)", function()
    local buf = buffer.alloc(4)
    buf:writeFloatLE(3.14)
    assert.is_true(math.abs(buf:readFloatLE() - 3.14) < 1e-6)
  end)

  it("writes and reads FloatBE at offset 0", function()
    local buf = buffer.alloc(4)
    buf:writeFloatBE(2.71, 0)
    assert.is_true(math.abs(buf:readFloatBE(0) - 2.71) < 1e-6)
  end)

  it("writes and reads FloatBE with omitted offset (defaults to 0)", function()
    local buf = buffer.alloc(4)
    buf:writeFloatBE(2.71)
    assert.is_true(math.abs(buf:readFloatBE() - 2.71) < 1e-6)
  end)

  it("writes and reads DoubleLE at offset 0", function()
    local buf = buffer.alloc(8)
    buf:writeDoubleLE(1.23456789, 0)
    assert.is_true(math.abs(buf:readDoubleLE(0) - 1.23456789) < 1e-12)
  end)

  it("writes and reads DoubleLE with omitted offset (defaults to 0)", function()
    local buf = buffer.alloc(8)
    buf:writeDoubleLE(1.23456789)
    assert.is_true(math.abs(buf:readDoubleLE() - 1.23456789) < 1e-12)
  end)

  it("writes and reads DoubleBE at offset 0", function()
    local buf = buffer.alloc(8)
    buf:writeDoubleBE(9.87654321, 0)
    assert.is_true(math.abs(buf:readDoubleBE(0) - 9.87654321) < 1e-12)
  end)

  it("writes and reads DoubleBE with omitted offset (defaults to 0)", function()
    local buf = buffer.alloc(8)
    buf:writeDoubleBE(9.87654321)
    assert.is_true(math.abs(buf:readDoubleBE() - 9.87654321) < 1e-12)
  end)

  it("tostring returns utf8 string", function()
    local buf = buffer.from("hello")
    assert.are.equal(buf:tostring(), "hello")
  end)

  it("tostring returns hex string", function()
    local buf = buffer.from("hi")
    assert.are.equal(buf:tostring("hex"), "6869")
  end)

  it("tostring supports start/end slicing", function()
    local buf = buffer.from("abcdef")
    assert.are.equal(buf:tostring("utf8", 2, 4), "bcd")
    assert.are.equal(buf:tostring("utf8", -3, -1), "def")
    assert.are.equal(buf:tostring("utf8", 10, 20), "")
  end)

  it("throws on out-of-bounds read/write", function()
    local buf = buffer.alloc(4)
    assert.has_error(function() buf:writeUInt32LE(1, 1) end)
    assert.has_error(function() buf:readUInt32LE(1) end)
    assert.has_error(function() buf:writeFloatBE(1.0, 1) end)
    assert.has_error(function() buf:readDoubleLE(1) end)
  end)

  it("throws on unsupported encoding for tostring", function()
    local buf = buffer.from("abc")
    assert.has_error(function() buf:tostring("base64") end)
  end)
end)
